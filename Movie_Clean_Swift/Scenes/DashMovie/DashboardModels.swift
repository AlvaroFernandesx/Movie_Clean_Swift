//
//  DashboardModels.swift
//  Movie_Clean_Swift
//
//  Created by Álvaro Fernandes on 15/01/20.
//  Copyright (c) 2020 Álvaro Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum DashboardModels {
    struct ViewModelCell {
        let news: [ViewModel]
        let topRepos: [ViewModel]
        let lastUpdated: [ViewModel]

//        init(news: MapNewsViewModel, topRepos: MapRepoViewModel, lastUpdated: MapRepoViewModel) {
//            self.news = news.items
//            self.topRepos = topRepos.items
//            self.lastUpdated = lastUpdated.items
//        }
    }
    
    public enum MovieSection: String, CaseIterable {
        case news
        case popular

        public var value: String {
            return String(describing: self.rawValue).localized()
        }
    }
 
    struct MovieApiResponse: Decodable {

        let movies: [Movie]

        private enum MovieApiResponseCodingKeys: String, CodingKey {
            case movies = "results"
        }
        
        init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: MovieApiResponseCodingKeys.self)
            movies = try container.decode([Movie].self, forKey: .movies)
           
        }
        
        init(_ movies: [Movie]) {
            self.movies = movies
        }
    }

    struct Movie: Decodable {
        let id: Int
        let posterPath: String
        let backdrop: String
        let title: String
        let overview: String
        
        enum MovieCodingKeys: String, CodingKey {
            case id
            case posterPath = "poster_path"
            case backdrop = "backdrop_path"
            case title
            case overview
        }
        

        init(from decoder: Decoder) throws {
            let movieContainer = try decoder.container(keyedBy: MovieCodingKeys.self)

            id = try movieContainer.decode(Int.self, forKey: .id)
            posterPath = try movieContainer.decode(String.self, forKey: .posterPath)
            backdrop = try movieContainer.decode(String.self, forKey: .backdrop)
            title = try movieContainer.decode(String.self, forKey: .title)
            overview = try movieContainer.decode(String.self, forKey: .overview)
        }
        
        init(_ id: Int,_ posterPath: String,_ backdrop: String,_ title: String,_ overview: String) {
            self.id = id
            self.posterPath = posterPath
            self.backdrop = backdrop
            self.title = title
            self.overview = overview
        }
    }
    
    struct ViewModel: Decodable {
        let id: Int
        let posterPath: String
        let backdrop: String
        let title: String
        let overview: String
        
        init(movie: Movie, section: MovieSection) {
            self.id = movie.id
            self.posterPath = "https://image.tmdb.org/t/p/w200/\(movie.posterPath)"
            self.backdrop = "https://image.tmdb.org/t/p/w200/\(movie.backdrop)"
            self.title = movie.title
            self.overview = movie.overview
        }
    }
    
    struct MapRepoViewModel {
        var items: [ViewModel]

        init(repositories: [Movie], section: MovieSection) {
            items = repositories.compactMap { ViewModel(movie: $0, section: section) }
        }
    }
    
//    struct MapNewsViewModel {
//        var items: [ViewModel]
//
//        init(new: [Movie], popular: [Movie]) {
//            let topAvatars = new.compactMap { $0.title }
//            let lastAvatars = popular.compactMap { $0.title }
//            items = [
//                ViewModel(title: Text.bestRepositories.value,
//                                  subtitle: Text.renownedRepositories.value,
//                                  description: Text.bestTools.value,
//                                  section: .new,
//                                  images: topAvatars),
//                ViewModel(title: Text.updatedRepositories.value,
//                                  subtitle: Text.theLatestUpdates.value,
//                                  description: Text.mostUpdatedRepositories.value,
//                                  section: .popular,
//                                  images: lastAvatars)
//            ]
//        }
//    }

}
