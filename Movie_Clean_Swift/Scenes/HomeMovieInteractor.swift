//
//  HomeMovieInteractor.swift
//  Movie_Clean_Swift
//
//  Created by Álvaro Fernandes on 30/12/19.
//  Copyright (c) 2019 Álvaro Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeMovieBusinessLogic {
    func load()
    func cellForRow(at index: Int) -> HomeMovieModels.ViewModel?
    func filterMovies(_ name: String)
    func changeForPopular()
    func changeForNew()
    func getMore()
    
    var numberOfRows: Int { get }
}

protocol HomeMovieDataStore {
    
}

class HomeMovieInteractor: HomeMovieBusinessLogic, HomeMovieDataStore {
    
    var presenter: HomeMoviePresentationLogic?
    var worker: HomeMovieWorker?
    var typeTable: MovieApi?
    
    var movies = [HomeMovieModels.Movie]()
    var filteredMovies: [HomeMovieModels.Movie] = []
    var moviesPopular: [HomeMovieModels.Movie] = []
    var moviesNew: [HomeMovieModels.Movie] = []
    
    let textNil = ""
    var countPopular = 1
    var countNew = 1
    
    init(worker: HomeMovieWorker = HomeMovieWorker()) {
      self.worker = worker
    }
    
    var numberOfRows: Int {
       return movies.count
    }
    
    func cellForRow(at index: Int) -> HomeMovieModels.ViewModel? {
        guard index >= 0 && index < numberOfRows else { return nil }
        let movie = movies[index]
        return HomeMovieModels.ViewModel(movie: movie)
    }
    
    func load() {
        DispatchQueue.main.async {
            self.loadNewMovie()
        }
        loadPopularMovie()
    }
    
    func loadPopularMovie() {
        worker?.getData(movieApi: MovieApi.popular, page: countPopular).done(handleRequestSuccessPopular).catch(handleRequestFailure)
    }
    
    func loadNewMovie() {
        worker?.getData(movieApi: MovieApi.newMovies, page: countNew).done(handleRequestSuccess).catch(handleRequestFailure)
    }
    
    private func handleRequestSuccess(_ response: HomeMovieModels.MovieApiResponse) {
        self.moviesNew.append(contentsOf: response.movies)
        self.filteredMovies = moviesNew
        self.movies = moviesNew
        self.typeTable = MovieApi.newMovies
        self.countNew += 1
        presenter?.reloadTableView()
    }
    
    private func handleRequestSuccessPopular(_ response: HomeMovieModels.MovieApiResponse) {
        self.moviesPopular.append(contentsOf: response.movies)
        self.filteredMovies = moviesPopular
        self.movies = moviesPopular
        self.typeTable = MovieApi.popular
        self.countPopular += 1
        presenter?.reloadTableView()
    }
    
    private func handleRequestFailure(_ error: Error) {
//        presenter?.presentError(error)
    }
    
    func filterMovies(_ searchText: String) {
        if searchText != textNil {
            movies = filteredMovies.filter { $0.title.contains(searchText) }
        } else {
            movies = filteredMovies
        }
        presenter?.reloadTableView()
    }
    
    func changeForPopular() {
        self.filteredMovies = moviesPopular
        self.movies = moviesPopular
        self.typeTable = MovieApi.popular
        presenter?.reloadTableView()
    }
    
    func changeForNew() {
        self.filteredMovies = moviesNew
        self.movies = moviesNew
        self.typeTable = MovieApi.newMovies
        presenter?.reloadTableView()
    }
    
    func getMore() {
        if typeTable == MovieApi.popular {
            loadPopularMovie()
        } else {
            loadNewMovie()
        }
    }
    
}
